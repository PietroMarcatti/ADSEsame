transmute(
from = from,
to = to_2,
type = 0,
step = to,  # The pivot node
id = pmin(id_1, id_2)  # Ensure consistent ID assignment
) %>%
distinct(from, to,to_2, .keep_all = TRUE)  # Remove duplicate paths
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
View(test_edges)
two_step_edges <- base_edges %>%
filter(type == 0) %>%
inner_join(filter(base_edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2)  # Avoid cycles like 2->3->2
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
to = to_2,
type = 4,
step = to,  # The pivot node
) %>%
distinct(from, to,to_2, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
to = to_2,
type = 4,
step = to,  # The pivot node
) %>%
distinct(from, to,step, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
to = to_2,
type = 4,
step = to,  # The pivot node
) %>%
distinct(from, to,step, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
to = to_2,
type = 4,
step = to,  # The pivot node
)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
to = to_2,
type = 4,
# The pivot node
)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4
# The pivot node
)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4  # The pivot node
) %>%
distinct(from, to,step, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = pmin(from, to_2),
step = to,
to = pmax(from, to_2),
type = 4  # The pivot node
) %>%
distinct(from, to,step, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = pmin(from, to_2),
step = to,
to = pmax(from, to_2),
type = 4  # The pivot node
) %>%
distinct(from, to,step, .keep_all = TRUE)%>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
View(test_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = pmin(from, to_2),
step = to,
to = pmax(from, to_2),
type = 4  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
two_step_edges <- edges %>%
filter(type == 0) %>%
inner_join(filter(edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2)
View(two_step_edges)
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
directed_base_edges <- edges %>% bind_rows(edges %>%
mutate(from = to, to = from))
two_step_edges <- directed_base_edges %>%
filter(type == 0) %>%
inner_join(filter(directed_base_edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
test_edges = compute_carriage_edges(base_edges)
directed_base_edges <- edges %>% bind_rows(edges %>%
mutate(from = to, to = from))
View(directed_base_edges)
test_edges = compute_carriage_edges(base_edges)
directed_base_edges <- base_edges %>% bind_rows(base_edges %>%
mutate(from = to, to = from))
test_edges = compute_carriage_edges(base_edges)
directed_base_edges <- base_edges %>% bind_rows(base_edges %>%
mutate(from = base_edges$to, to = base_edges$from))
compute_carriage_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
directed_base_edges <- edges %>% bind_rows(edges %>%
mutate(from = edges$to, to = edges$from))
two_step_edges <- directed_base_edges %>%
filter(type == 0) %>%
inner_join(filter(directed_base_edges, type == 0), by = c("to" = "from"), suffix = c("_1", "_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
test_edges = compute_carriage_edges(base_edges)
directed_base_edges <- base_edges %>% bind_rows(base_edges %>%
mutate(from = base_edges$to, to = base_edges$from))
carriage_edges = compute_double_edges(base_edges%>%filter(type==0))
compute_double_edges <- function(edges) {
max_id <- max(edges$id, na.rm = TRUE)
directed_base_edges <- edges %>% bind_rows(edges %>%
mutate(from = edges$to, to = edges$from))
two_step_edges <- directed_base_edges %>%
inner_join(directed_base_edges, by = c("to" = "from"), suffix =  c("_1","_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = 4  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
carriage_edges = compute_double_edges(base_edges%>%filter(type==0))
black_double_edges = compute_double_edges(base_edges%>%filter(type==1))
View(black_double_edges)
compute_double_edges <- function(edges, edge_type) {
max_id <- max(edges$id, na.rm = TRUE)
directed_base_edges <- edges %>% bind_rows(edges %>%
mutate(from = edges$to, to = edges$from))
two_step_edges <- directed_base_edges %>%
inner_join(directed_base_edges, by = c("to" = "from"), suffix =  c("_1","_2")) %>%
filter(from != to_2) %>%  # Avoid cycles like 2->3->2
transmute(
from = from,
step = to,
to = to_2,
type = edge_type  # The pivot node
) %>%
arrange(from, to, step) %>%
distinct(.keep_all = TRUE) %>%  # Remove duplicate paths
mutate(id = row_number() + max_id)
return(two_step_edges)
}
carriage_edges = compute_double_edges(base_edges%>%filter(type==0),4)
black_double_edges = compute_double_edges(base_edges%>%filter(type==1),5)
carriage_edges = compute_double_edges(base_edges%>%filter(type==0),4)
black_double_edges = compute_double_edges(base_edges%>%filter(type==1),5)
all_edges <- bind_rows(base_edges, carriage_edges, black_double_edges)
carriage_edges = compute_double_edges(base_edges%>%filter(type==0),4)
black_double_edges = compute_double_edges(base_edges%>%filter(type==1),5)
edges <- bind_rows(base_edges, carriage_edges, black_double_edges)
carriage_edges = compute_double_edges(base_edges%>%filter(type==0),4)
black_double_edges = compute_double_edges(base_edges%>%filter(type==1),5)
edges <- bind_rows(base_edges, carriage_edges, black_double_edges)
carriage_edges = compute_double_edges(base_edges%>%filter(type==0),4)
black_double_edges = compute_double_edges(base_edges%>%filter(type==1),5)
edges <- bind_rows(base_edges, carriage_edges, black_double_edges)
write.csv(edges, "datasets/all_edges.csv", sep=",", row.names = FALSE)
path_matrix_data <- read.csv("datasets/output_matrix.csv", header = FALSE)
path_matrix <- as.matrix(path_matrix_data)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
murder_sites <- c(3,21,27,65,84,147,149,158)
# Carico i dataset
n1 <- read.csv("datasets/temp_n1.csv")
n2 <- read.csv("datasets/temp_n2.csv")
n3 <- read.csv("datasets/temp_n3.csv")
n4 <- read.csv("datasets/temp_n4.csv")
edges <- read.csv("datasets/all_edges.csv")
# Creazione del grafo
complete_g <- graph_from_data_frame(vertices = nodes,d = edges, directed = FALSE)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/(length*count),
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = 100-(norm_min_max(path_policing_score$policing_score)+rank_percentiles(path_policing_score$policing_score))/2
)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/(length*count),
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = 100-(norm_min_max(path_policing_score$policing_score)+rank_percentiles(path_policing_score$policing_score))/2
)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/length/count,
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = 100-(norm_min_max(path_policing_score$policing_score)+rank_percentiles(path_policing_score$policing_score))/2
)
View(factor_4_score)
View(factor_4_score)
View(factor_4_score)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/length/count,
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = (100-norm_min_max(path_policing_score$policing_score)+100-rank_percentiles(path_policing_score$policing_score))/2
)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/length/count,
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = (200-norm_min_max(path_policing_score$policing_score)+rank_percentiles(path_policing_score$policing_score))/2
)
all_paths = bind_rows(n1, n2, n3, n4)
path_policing_matrix <- path_matrix %*% (100-factor_3_complete$score)
norm_path_pol_matrix <- path_policing_matrix / all_paths$cost
norm_path_pol_cost <- rowSums(norm_path_pol_matrix)
path_policing_frame <- data.frame(
to = all_paths$to,
cost = all_paths$cost,
policing = norm_path_pol_cost
)
path_policing_score <- path_policing_frame %>% group_by(to) %>%
summarize(
length = sum(cost),
count = n(),
policing_score = sum(policing)/length/count,
.groups = "drop"
)
path_policing_score = path_policing_score[-murder_sites,]
factor_4_score = data.frame(
node = hideouts,
score = 100-(norm_min_max(path_policing_score$policing_score)+rank_percentiles(path_policing_score$policing_score))/2
)
gc()
knitr::opts_chunk$set(echo = TRUE, dev = 'pdf',  out.width = "\\textwidth",
out.extra = "keepaspectratio=false")
path_matrix_data <- read.csv("datasets/output_matrix.csv", header = FALSE)
path_matrix_data <- path_matrix_data %>% group_by(from, groups="drop")
library(igraph)
library(tidyverse)
library(tidygraph)
library(ggraph)
library(gridExtra)
library(tcltk)
library(centiserve)
# Lettura dei file CSV
nodes <- read_csv("datasets/nodes.csv", show_col_types = FALSE)
head(nodes)
base_edges <- read_csv("datasets/base_edges.csv",show_col_types = FALSE)
head(base_edges)
# Creazione del grafo
g <- graph_from_data_frame(vertices= nodes, d = base_edges, directed = FALSE)
path_matrix_data <- path_matrix_data %>% group_by(from, groups="drop")
View(path_matrix)
path_matrix_data <- read.csv("datasets/output_matrix.csv", header = FALSE)
path_matrix_data <- path_matrix_data %>% group_by(V1, groups="drop")
path_matrix <- as.matrix(path_matrix_data)
View(path_matrix)
gc()
View(path_matrix)
View(path_matrix)
View(path_matrix)
knitr::opts_chunk$set(echo = TRUE, dev = 'pdf',  out.width = "\\textwidth",
out.extra = "keepaspectratio=false")
murder_sites <- c(3,21,27,65,84,147,149,158)
# Carico i dataset
n1 <- read.csv("datasets/temp_n1.csv")
n2 <- read.csv("datasets/temp_n2.csv")
n3 <- read.csv("datasets/temp_n3.csv")
n4 <- read.csv("datasets/temp_n4.csv")
edges <- read.csv("datasets/all_edges.csv")
all_paths <- bind_rows(n1, n2, n3, n4)
library(igraph)
library(tidyverse)
library(tidygraph)
library(ggraph)
library(gridExtra)
library(tcltk)
library(abind)
library(bigmemory)
# Lettura dei file CSV
nodes <- read_csv("datasets/nodes.csv", show_col_types = FALSE)
head(nodes)
base_edges <- read_csv("datasets/base_edges.csv",show_col_types = FALSE)
head(base_edges)
# Creazione del grafo
g <- graph_from_data_frame(vertices= nodes, d = base_edges, directed = FALSE)
murder_sites <- c(3,21,27,65,84,147,149,158)
# Carico i dataset
n1 <- read.csv("datasets/temp_n1.csv")
n2 <- read.csv("datasets/temp_n2.csv")
n3 <- read.csv("datasets/temp_n3.csv")
n4 <- read.csv("datasets/temp_n4.csv")
edges <- read.csv("datasets/all_edges.csv")
all_paths <- bind_rows(n1, n2, n3, n4)
write.csv(all_paths, "datasets/all_paths.csv", sep=",", row.names = FALSE)
# Creazione del grafo
complete_g <- graph_from_data_frame(vertices = nodes,d = edges, directed = FALSE)
